/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.eanghel.planning.ui.quickfix;

import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import uk.ac.kcl.eanghel.planning.validation.PlanningValidator;

/**
 * Custom quickfixes.
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
@SuppressWarnings("all")
public class PlanningQuickfixProvider extends DefaultQuickfixProvider {
  @Fix(PlanningValidator.INVALID_STORY_POINT)
  public void suggestFibonacciNumber(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      final int storypoint = Integer.parseInt(xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue()));
      if ((storypoint >= 100)) {
        xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "89");
      } else {
        xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "5");
      }
    };
    acceptor.accept(issue, "Set to Fibonacci number", "The story points need to be in the Fibonacci sequence.", null, _function);
  }
  
  @Fix(PlanningValidator.DUPLICATE_OWNER)
  public void fixDuplicateOwner(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      final String name = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), (name + "1"));
    };
    acceptor.accept(issue, "De-duplicate owners", "Cannot assign the same name to multiple owners.", null, _function);
  }
  
  @Fix(PlanningValidator.INVALID_OWNER)
  public void fixLowerCaseName(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      final String firstLetter = xtextDocument.get((issue.getOffset()).intValue(), 1);
      xtextDocument.replace((issue.getOffset()).intValue(), 1, firstLetter.toUpperCase());
    };
    acceptor.accept(issue, "Fix name capitalisation", "The name of an owner needs to start with an upper case letter.", null, _function);
  }
  
  @Fix(PlanningValidator.PRIORITY_TOO_HIGH)
  public void fixPriorityTooHigh(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "25");
    };
    acceptor.accept(issue, "Reduce priority to 25.", "Priority should be lower or equal to 25", null, _function);
  }
}
