/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.eanghel.planning.planning.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import uk.ac.kcl.eanghel.planning.planning.Owner;
import uk.ac.kcl.eanghel.planning.planning.PlanningPackage;
import uk.ac.kcl.eanghel.planning.planning.Points;
import uk.ac.kcl.eanghel.planning.planning.Project;
import uk.ac.kcl.eanghel.planning.planning.Status;
import uk.ac.kcl.eanghel.planning.planning.TaskType;
import uk.ac.kcl.eanghel.planning.planning.Tasks;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tasks</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.eanghel.planning.planning.impl.TasksImpl#getTaskType <em>Task Type</em>}</li>
 *   <li>{@link uk.ac.kcl.eanghel.planning.planning.impl.TasksImpl#getOwner <em>Owner</em>}</li>
 *   <li>{@link uk.ac.kcl.eanghel.planning.planning.impl.TasksImpl#getPriority <em>Priority</em>}</li>
 *   <li>{@link uk.ac.kcl.eanghel.planning.planning.impl.TasksImpl#getPoints <em>Points</em>}</li>
 *   <li>{@link uk.ac.kcl.eanghel.planning.planning.impl.TasksImpl#getStatus <em>Status</em>}</li>
 *   <li>{@link uk.ac.kcl.eanghel.planning.planning.impl.TasksImpl#getProj <em>Proj</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TasksImpl extends MinimalEObjectImpl.Container implements Tasks
{
  /**
   * The cached value of the '{@link #getTaskType() <em>Task Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskType()
   * @generated
   * @ordered
   */
  protected TaskType taskType;

  /**
   * The cached value of the '{@link #getOwner() <em>Owner</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwner()
   * @generated
   * @ordered
   */
  protected EList<Owner> owner;

  /**
   * The default value of the '{@link #getPriority() <em>Priority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPriority()
   * @generated
   * @ordered
   */
  protected static final int PRIORITY_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPriority() <em>Priority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPriority()
   * @generated
   * @ordered
   */
  protected int priority = PRIORITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getPoints() <em>Points</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoints()
   * @generated
   * @ordered
   */
  protected Points points;

  /**
   * The default value of the '{@link #getStatus() <em>Status</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatus()
   * @generated
   * @ordered
   */
  protected static final Status STATUS_EDEFAULT = Status.STUCK;

  /**
   * The cached value of the '{@link #getStatus() <em>Status</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatus()
   * @generated
   * @ordered
   */
  protected Status status = STATUS_EDEFAULT;

  /**
   * The cached value of the '{@link #getProj() <em>Proj</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProj()
   * @generated
   * @ordered
   */
  protected EList<Project> proj;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TasksImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PlanningPackage.Literals.TASKS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskType getTaskType()
  {
    return taskType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTaskType(TaskType newTaskType, NotificationChain msgs)
  {
    TaskType oldTaskType = taskType;
    taskType = newTaskType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PlanningPackage.TASKS__TASK_TYPE, oldTaskType, newTaskType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTaskType(TaskType newTaskType)
  {
    if (newTaskType != taskType)
    {
      NotificationChain msgs = null;
      if (taskType != null)
        msgs = ((InternalEObject)taskType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PlanningPackage.TASKS__TASK_TYPE, null, msgs);
      if (newTaskType != null)
        msgs = ((InternalEObject)newTaskType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PlanningPackage.TASKS__TASK_TYPE, null, msgs);
      msgs = basicSetTaskType(newTaskType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PlanningPackage.TASKS__TASK_TYPE, newTaskType, newTaskType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Owner> getOwner()
  {
    if (owner == null)
    {
      owner = new EObjectResolvingEList<Owner>(Owner.class, this, PlanningPackage.TASKS__OWNER);
    }
    return owner;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getPriority()
  {
    return priority;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPriority(int newPriority)
  {
    int oldPriority = priority;
    priority = newPriority;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PlanningPackage.TASKS__PRIORITY, oldPriority, priority));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Points getPoints()
  {
    return points;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPoints(Points newPoints, NotificationChain msgs)
  {
    Points oldPoints = points;
    points = newPoints;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PlanningPackage.TASKS__POINTS, oldPoints, newPoints);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPoints(Points newPoints)
  {
    if (newPoints != points)
    {
      NotificationChain msgs = null;
      if (points != null)
        msgs = ((InternalEObject)points).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PlanningPackage.TASKS__POINTS, null, msgs);
      if (newPoints != null)
        msgs = ((InternalEObject)newPoints).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PlanningPackage.TASKS__POINTS, null, msgs);
      msgs = basicSetPoints(newPoints, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PlanningPackage.TASKS__POINTS, newPoints, newPoints));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Status getStatus()
  {
    return status;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatus(Status newStatus)
  {
    Status oldStatus = status;
    status = newStatus == null ? STATUS_EDEFAULT : newStatus;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PlanningPackage.TASKS__STATUS, oldStatus, status));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Project> getProj()
  {
    if (proj == null)
    {
      proj = new EObjectResolvingEList<Project>(Project.class, this, PlanningPackage.TASKS__PROJ);
    }
    return proj;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PlanningPackage.TASKS__TASK_TYPE:
        return basicSetTaskType(null, msgs);
      case PlanningPackage.TASKS__POINTS:
        return basicSetPoints(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PlanningPackage.TASKS__TASK_TYPE:
        return getTaskType();
      case PlanningPackage.TASKS__OWNER:
        return getOwner();
      case PlanningPackage.TASKS__PRIORITY:
        return getPriority();
      case PlanningPackage.TASKS__POINTS:
        return getPoints();
      case PlanningPackage.TASKS__STATUS:
        return getStatus();
      case PlanningPackage.TASKS__PROJ:
        return getProj();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PlanningPackage.TASKS__TASK_TYPE:
        setTaskType((TaskType)newValue);
        return;
      case PlanningPackage.TASKS__OWNER:
        getOwner().clear();
        getOwner().addAll((Collection<? extends Owner>)newValue);
        return;
      case PlanningPackage.TASKS__PRIORITY:
        setPriority((Integer)newValue);
        return;
      case PlanningPackage.TASKS__POINTS:
        setPoints((Points)newValue);
        return;
      case PlanningPackage.TASKS__STATUS:
        setStatus((Status)newValue);
        return;
      case PlanningPackage.TASKS__PROJ:
        getProj().clear();
        getProj().addAll((Collection<? extends Project>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PlanningPackage.TASKS__TASK_TYPE:
        setTaskType((TaskType)null);
        return;
      case PlanningPackage.TASKS__OWNER:
        getOwner().clear();
        return;
      case PlanningPackage.TASKS__PRIORITY:
        setPriority(PRIORITY_EDEFAULT);
        return;
      case PlanningPackage.TASKS__POINTS:
        setPoints((Points)null);
        return;
      case PlanningPackage.TASKS__STATUS:
        setStatus(STATUS_EDEFAULT);
        return;
      case PlanningPackage.TASKS__PROJ:
        getProj().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PlanningPackage.TASKS__TASK_TYPE:
        return taskType != null;
      case PlanningPackage.TASKS__OWNER:
        return owner != null && !owner.isEmpty();
      case PlanningPackage.TASKS__PRIORITY:
        return priority != PRIORITY_EDEFAULT;
      case PlanningPackage.TASKS__POINTS:
        return points != null;
      case PlanningPackage.TASKS__STATUS:
        return status != STATUS_EDEFAULT;
      case PlanningPackage.TASKS__PROJ:
        return proj != null && !proj.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (priority: ");
    result.append(priority);
    result.append(", status: ");
    result.append(status);
    result.append(')');
    return result.toString();
  }

} //TasksImpl
