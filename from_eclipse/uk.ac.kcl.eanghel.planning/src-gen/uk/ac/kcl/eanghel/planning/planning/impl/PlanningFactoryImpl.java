/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.eanghel.planning.planning.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.eanghel.planning.planning.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PlanningFactoryImpl extends EFactoryImpl implements PlanningFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PlanningFactory init()
  {
    try
    {
      PlanningFactory thePlanningFactory = (PlanningFactory)EPackage.Registry.INSTANCE.getEFactory(PlanningPackage.eNS_URI);
      if (thePlanningFactory != null)
      {
        return thePlanningFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PlanningFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlanningFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PlanningPackage.TASK_PLANNING: return createTaskPlanning();
      case PlanningPackage.OWNER: return createOwner();
      case PlanningPackage.PROJECT: return createProject();
      case PlanningPackage.TASKS: return createTasks();
      case PlanningPackage.POINTS: return createPoints();
      case PlanningPackage.TASK_TYPE: return createTaskType();
      case PlanningPackage.FEATURE_TASK: return createFeatureTask();
      case PlanningPackage.BUG_TASK: return createBugTask();
      case PlanningPackage.ANALYSE_TASK: return createAnalyseTask();
      case PlanningPackage.TEST_TASK: return createTestTask();
      case PlanningPackage.DOCUMENT_TASK: return createDocumentTask();
      case PlanningPackage.DEPLOY_TASK: return createDeployTask();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PlanningPackage.STATUS:
        return createStatusFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PlanningPackage.STATUS:
        return convertStatusToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskPlanning createTaskPlanning()
  {
    TaskPlanningImpl taskPlanning = new TaskPlanningImpl();
    return taskPlanning;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Owner createOwner()
  {
    OwnerImpl owner = new OwnerImpl();
    return owner;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Project createProject()
  {
    ProjectImpl project = new ProjectImpl();
    return project;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tasks createTasks()
  {
    TasksImpl tasks = new TasksImpl();
    return tasks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Points createPoints()
  {
    PointsImpl points = new PointsImpl();
    return points;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskType createTaskType()
  {
    TaskTypeImpl taskType = new TaskTypeImpl();
    return taskType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FeatureTask createFeatureTask()
  {
    FeatureTaskImpl featureTask = new FeatureTaskImpl();
    return featureTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BugTask createBugTask()
  {
    BugTaskImpl bugTask = new BugTaskImpl();
    return bugTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnalyseTask createAnalyseTask()
  {
    AnalyseTaskImpl analyseTask = new AnalyseTaskImpl();
    return analyseTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TestTask createTestTask()
  {
    TestTaskImpl testTask = new TestTaskImpl();
    return testTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DocumentTask createDocumentTask()
  {
    DocumentTaskImpl documentTask = new DocumentTaskImpl();
    return documentTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeployTask createDeployTask()
  {
    DeployTaskImpl deployTask = new DeployTaskImpl();
    return deployTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Status createStatusFromString(EDataType eDataType, String initialValue)
  {
    Status result = Status.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStatusToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlanningPackage getPlanningPackage()
  {
    return (PlanningPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PlanningPackage getPackage()
  {
    return PlanningPackage.eINSTANCE;
  }

} //PlanningFactoryImpl
