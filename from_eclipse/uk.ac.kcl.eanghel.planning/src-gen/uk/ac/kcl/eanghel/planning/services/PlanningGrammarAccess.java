/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.eanghel.planning.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PlanningGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TaskPlanningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.TaskPlanning");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTeamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOwnersKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOwnersOwnerParserRuleCall_3_0 = (RuleCall)cOwnersAssignment_3.eContents().get(0);
		private final Keyword cProjectsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cProjsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProjsProjectParserRuleCall_5_0 = (RuleCall)cProjsAssignment_5.eContents().get(0);
		private final Assignment cTasksAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTasksTasksParserRuleCall_6_0 = (RuleCall)cTasksAssignment_6.eContents().get(0);
		
		//TaskPlanning:
		//	'Team' name=ID
		//	'Owners' owners+=Owner+
		//	'Projects' projs+=Project+
		//	tasks+=Tasks*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Team' name=ID
		//'Owners' owners+=Owner+
		//'Projects' projs+=Project+
		//tasks+=Tasks*
		public Group getGroup() { return cGroup; }
		
		//'Team'
		public Keyword getTeamKeyword_0() { return cTeamKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Owners'
		public Keyword getOwnersKeyword_2() { return cOwnersKeyword_2; }
		
		//owners+=Owner+
		public Assignment getOwnersAssignment_3() { return cOwnersAssignment_3; }
		
		//Owner
		public RuleCall getOwnersOwnerParserRuleCall_3_0() { return cOwnersOwnerParserRuleCall_3_0; }
		
		//'Projects'
		public Keyword getProjectsKeyword_4() { return cProjectsKeyword_4; }
		
		//projs+=Project+
		public Assignment getProjsAssignment_5() { return cProjsAssignment_5; }
		
		//Project
		public RuleCall getProjsProjectParserRuleCall_5_0() { return cProjsProjectParserRuleCall_5_0; }
		
		//tasks+=Tasks*
		public Assignment getTasksAssignment_6() { return cTasksAssignment_6; }
		
		//Tasks
		public RuleCall getTasksTasksParserRuleCall_6_0() { return cTasksTasksParserRuleCall_6_0; }
	}
	public class OwnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.Owner");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Owner:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.Project");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Project:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TasksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.Tasks");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTaskTypeTaskTypeParserRuleCall_1_0 = (RuleCall)cTaskTypeAssignment_1.eContents().get(0);
		private final Keyword cOwnerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOwnerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOwnerOwnerCrossReference_3_0 = (CrossReference)cOwnerAssignment_3.eContents().get(0);
		private final RuleCall cOwnerOwnerIDTerminalRuleCall_3_0_1 = (RuleCall)cOwnerOwnerCrossReference_3_0.eContents().get(1);
		private final Keyword cPriorityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPriorityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPriorityINTTerminalRuleCall_5_0 = (RuleCall)cPriorityAssignment_5.eContents().get(0);
		private final Keyword cPointsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPointsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPointsPointsParserRuleCall_7_0 = (RuleCall)cPointsAssignment_7.eContents().get(0);
		private final Keyword cStatusKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStatusAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatusStatusEnumRuleCall_9_0 = (RuleCall)cStatusAssignment_9.eContents().get(0);
		private final Keyword cProjectKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cProjAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cProjProjectCrossReference_11_0 = (CrossReference)cProjAssignment_11.eContents().get(0);
		private final RuleCall cProjProjectIDTerminalRuleCall_11_0_1 = (RuleCall)cProjProjectCrossReference_11_0.eContents().get(1);
		
		//Tasks:
		//	'Task' taskType=TaskType
		//	'owner' owner+=[Owner]+
		//	'priority' priority=INT
		//	'points' points=Points
		//	'status' status=Status
		//	'project' proj+=[Project]+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Task' taskType=TaskType
		//'owner' owner+=[Owner]+
		//'priority' priority=INT
		//'points' points=Points
		//'status' status=Status
		//'project' proj+=[Project]+
		public Group getGroup() { return cGroup; }
		
		//'Task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//taskType=TaskType
		public Assignment getTaskTypeAssignment_1() { return cTaskTypeAssignment_1; }
		
		//TaskType
		public RuleCall getTaskTypeTaskTypeParserRuleCall_1_0() { return cTaskTypeTaskTypeParserRuleCall_1_0; }
		
		//'owner'
		public Keyword getOwnerKeyword_2() { return cOwnerKeyword_2; }
		
		//owner+=[Owner]+
		public Assignment getOwnerAssignment_3() { return cOwnerAssignment_3; }
		
		//[Owner]
		public CrossReference getOwnerOwnerCrossReference_3_0() { return cOwnerOwnerCrossReference_3_0; }
		
		//ID
		public RuleCall getOwnerOwnerIDTerminalRuleCall_3_0_1() { return cOwnerOwnerIDTerminalRuleCall_3_0_1; }
		
		//'priority'
		public Keyword getPriorityKeyword_4() { return cPriorityKeyword_4; }
		
		//priority=INT
		public Assignment getPriorityAssignment_5() { return cPriorityAssignment_5; }
		
		//INT
		public RuleCall getPriorityINTTerminalRuleCall_5_0() { return cPriorityINTTerminalRuleCall_5_0; }
		
		//'points'
		public Keyword getPointsKeyword_6() { return cPointsKeyword_6; }
		
		//points=Points
		public Assignment getPointsAssignment_7() { return cPointsAssignment_7; }
		
		//Points
		public RuleCall getPointsPointsParserRuleCall_7_0() { return cPointsPointsParserRuleCall_7_0; }
		
		//'status'
		public Keyword getStatusKeyword_8() { return cStatusKeyword_8; }
		
		//status=Status
		public Assignment getStatusAssignment_9() { return cStatusAssignment_9; }
		
		//Status
		public RuleCall getStatusStatusEnumRuleCall_9_0() { return cStatusStatusEnumRuleCall_9_0; }
		
		//'project'
		public Keyword getProjectKeyword_10() { return cProjectKeyword_10; }
		
		//proj+=[Project]+
		public Assignment getProjAssignment_11() { return cProjAssignment_11; }
		
		//[Project]
		public CrossReference getProjProjectCrossReference_11_0() { return cProjProjectCrossReference_11_0; }
		
		//ID
		public RuleCall getProjProjectIDTerminalRuleCall_11_0_1() { return cProjProjectIDTerminalRuleCall_11_0_1; }
	}
	public class PointsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.Points");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Points:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class TaskTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.TaskType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBugTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnalyseTaskParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTestTaskParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDocumentTaskParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeployTaskParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TaskType:
		//	FeatureTask | BugTask | AnalyseTask | TestTask | DocumentTask | DeployTask;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureTask | BugTask | AnalyseTask | TestTask | DocumentTask | DeployTask
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureTask
		public RuleCall getFeatureTaskParserRuleCall_0() { return cFeatureTaskParserRuleCall_0; }
		
		//BugTask
		public RuleCall getBugTaskParserRuleCall_1() { return cBugTaskParserRuleCall_1; }
		
		//AnalyseTask
		public RuleCall getAnalyseTaskParserRuleCall_2() { return cAnalyseTaskParserRuleCall_2; }
		
		//TestTask
		public RuleCall getTestTaskParserRuleCall_3() { return cTestTaskParserRuleCall_3; }
		
		//DocumentTask
		public RuleCall getDocumentTaskParserRuleCall_4() { return cDocumentTaskParserRuleCall_4; }
		
		//DeployTask
		public RuleCall getDeployTaskParserRuleCall_5() { return cDeployTaskParserRuleCall_5; }
	}
	public class FeatureTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.FeatureTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatSTRINGTerminalRuleCall_1_0 = (RuleCall)cFeatAssignment_1.eContents().get(0);
		
		//FeatureTask:
		//	'Feature' feat=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Feature' feat=STRING
		public Group getGroup() { return cGroup; }
		
		//'Feature'
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//feat=STRING
		public Assignment getFeatAssignment_1() { return cFeatAssignment_1; }
		
		//STRING
		public RuleCall getFeatSTRINGTerminalRuleCall_1_0() { return cFeatSTRINGTerminalRuleCall_1_0; }
	}
	public class BugTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.BugTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBugKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBugAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBugSTRINGTerminalRuleCall_1_0 = (RuleCall)cBugAssignment_1.eContents().get(0);
		
		//BugTask:
		//	'Bug' bug=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Bug' bug=STRING
		public Group getGroup() { return cGroup; }
		
		//'Bug'
		public Keyword getBugKeyword_0() { return cBugKeyword_0; }
		
		//bug=STRING
		public Assignment getBugAssignment_1() { return cBugAssignment_1; }
		
		//STRING
		public RuleCall getBugSTRINGTerminalRuleCall_1_0() { return cBugSTRINGTerminalRuleCall_1_0; }
	}
	public class AnalyseTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.AnalyseTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalyseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnalyseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnalyseSTRINGTerminalRuleCall_1_0 = (RuleCall)cAnalyseAssignment_1.eContents().get(0);
		
		//AnalyseTask:
		//	'Analyse' analyse=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Analyse' analyse=STRING
		public Group getGroup() { return cGroup; }
		
		//'Analyse'
		public Keyword getAnalyseKeyword_0() { return cAnalyseKeyword_0; }
		
		//analyse=STRING
		public Assignment getAnalyseAssignment_1() { return cAnalyseAssignment_1; }
		
		//STRING
		public RuleCall getAnalyseSTRINGTerminalRuleCall_1_0() { return cAnalyseSTRINGTerminalRuleCall_1_0; }
	}
	public class TestTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.TestTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestSTRINGTerminalRuleCall_1_0 = (RuleCall)cTestAssignment_1.eContents().get(0);
		
		//TestTask:
		//	'Test' test=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Test' test=STRING
		public Group getGroup() { return cGroup; }
		
		//'Test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//test=STRING
		public Assignment getTestAssignment_1() { return cTestAssignment_1; }
		
		//STRING
		public RuleCall getTestSTRINGTerminalRuleCall_1_0() { return cTestSTRINGTerminalRuleCall_1_0; }
	}
	public class DocumentTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.DocumentTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDocumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDocAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDocSTRINGTerminalRuleCall_1_0 = (RuleCall)cDocAssignment_1.eContents().get(0);
		
		//DocumentTask:
		//	'Document' doc=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Document' doc=STRING
		public Group getGroup() { return cGroup; }
		
		//'Document'
		public Keyword getDocumentKeyword_0() { return cDocumentKeyword_0; }
		
		//doc=STRING
		public Assignment getDocAssignment_1() { return cDocAssignment_1; }
		
		//STRING
		public RuleCall getDocSTRINGTerminalRuleCall_1_0() { return cDocSTRINGTerminalRuleCall_1_0; }
	}
	public class DeployTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.DeployTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeployKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeployAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeploySTRINGTerminalRuleCall_1_0 = (RuleCall)cDeployAssignment_1.eContents().get(0);
		
		//DeployTask:
		//	'Deploy' deploy=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Deploy' deploy=STRING
		public Group getGroup() { return cGroup; }
		
		//'Deploy'
		public Keyword getDeployKeyword_0() { return cDeployKeyword_0; }
		
		//deploy=STRING
		public Assignment getDeployAssignment_1() { return cDeployAssignment_1; }
		
		//STRING
		public RuleCall getDeploySTRINGTerminalRuleCall_1_0() { return cDeploySTRINGTerminalRuleCall_1_0; }
	}
	
	public class StatusElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.eanghel.planning.Planning.Status");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTUCKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTUCKStuckKeyword_0_0 = (Keyword)cSTUCKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPROGRESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPROGRESSInProgressKeyword_1_0 = (Keyword)cPROGRESSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDONEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDONEDoneKeyword_2_0 = (Keyword)cDONEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cREVIEWEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cREVIEWWaitingForReviewKeyword_3_0 = (Keyword)cREVIEWEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Status:
		//	STUCK='Stuck' | PROGRESS='In Progress' | DONE='Done' | REVIEW='Waiting for review';
		public EnumRule getRule() { return rule; }
		
		//STUCK='Stuck' | PROGRESS='In Progress' | DONE='Done' | REVIEW='Waiting for review'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STUCK='Stuck'
		public EnumLiteralDeclaration getSTUCKEnumLiteralDeclaration_0() { return cSTUCKEnumLiteralDeclaration_0; }
		
		//'Stuck'
		public Keyword getSTUCKStuckKeyword_0_0() { return cSTUCKStuckKeyword_0_0; }
		
		//PROGRESS='In Progress'
		public EnumLiteralDeclaration getPROGRESSEnumLiteralDeclaration_1() { return cPROGRESSEnumLiteralDeclaration_1; }
		
		//'In Progress'
		public Keyword getPROGRESSInProgressKeyword_1_0() { return cPROGRESSInProgressKeyword_1_0; }
		
		//DONE='Done'
		public EnumLiteralDeclaration getDONEEnumLiteralDeclaration_2() { return cDONEEnumLiteralDeclaration_2; }
		
		//'Done'
		public Keyword getDONEDoneKeyword_2_0() { return cDONEDoneKeyword_2_0; }
		
		//REVIEW='Waiting for review'
		public EnumLiteralDeclaration getREVIEWEnumLiteralDeclaration_3() { return cREVIEWEnumLiteralDeclaration_3; }
		
		//'Waiting for review'
		public Keyword getREVIEWWaitingForReviewKeyword_3_0() { return cREVIEWWaitingForReviewKeyword_3_0; }
	}
	
	private final TaskPlanningElements pTaskPlanning;
	private final OwnerElements pOwner;
	private final ProjectElements pProject;
	private final TasksElements pTasks;
	private final PointsElements pPoints;
	private final TaskTypeElements pTaskType;
	private final FeatureTaskElements pFeatureTask;
	private final BugTaskElements pBugTask;
	private final AnalyseTaskElements pAnalyseTask;
	private final TestTaskElements pTestTask;
	private final DocumentTaskElements pDocumentTask;
	private final DeployTaskElements pDeployTask;
	private final StatusElements eStatus;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PlanningGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTaskPlanning = new TaskPlanningElements();
		this.pOwner = new OwnerElements();
		this.pProject = new ProjectElements();
		this.pTasks = new TasksElements();
		this.pPoints = new PointsElements();
		this.pTaskType = new TaskTypeElements();
		this.pFeatureTask = new FeatureTaskElements();
		this.pBugTask = new BugTaskElements();
		this.pAnalyseTask = new AnalyseTaskElements();
		this.pTestTask = new TestTaskElements();
		this.pDocumentTask = new DocumentTaskElements();
		this.pDeployTask = new DeployTaskElements();
		this.eStatus = new StatusElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.eanghel.planning.Planning".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TaskPlanning:
	//	'Team' name=ID
	//	'Owners' owners+=Owner+
	//	'Projects' projs+=Project+
	//	tasks+=Tasks*;
	public TaskPlanningElements getTaskPlanningAccess() {
		return pTaskPlanning;
	}
	
	public ParserRule getTaskPlanningRule() {
		return getTaskPlanningAccess().getRule();
	}
	
	//Owner:
	//	name=ID;
	public OwnerElements getOwnerAccess() {
		return pOwner;
	}
	
	public ParserRule getOwnerRule() {
		return getOwnerAccess().getRule();
	}
	
	//Project:
	//	name=ID;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//Tasks:
	//	'Task' taskType=TaskType
	//	'owner' owner+=[Owner]+
	//	'priority' priority=INT
	//	'points' points=Points
	//	'status' status=Status
	//	'project' proj+=[Project]+;
	public TasksElements getTasksAccess() {
		return pTasks;
	}
	
	public ParserRule getTasksRule() {
		return getTasksAccess().getRule();
	}
	
	//Points:
	//	value=INT;
	public PointsElements getPointsAccess() {
		return pPoints;
	}
	
	public ParserRule getPointsRule() {
		return getPointsAccess().getRule();
	}
	
	//TaskType:
	//	FeatureTask | BugTask | AnalyseTask | TestTask | DocumentTask | DeployTask;
	public TaskTypeElements getTaskTypeAccess() {
		return pTaskType;
	}
	
	public ParserRule getTaskTypeRule() {
		return getTaskTypeAccess().getRule();
	}
	
	//FeatureTask:
	//	'Feature' feat=STRING;
	public FeatureTaskElements getFeatureTaskAccess() {
		return pFeatureTask;
	}
	
	public ParserRule getFeatureTaskRule() {
		return getFeatureTaskAccess().getRule();
	}
	
	//BugTask:
	//	'Bug' bug=STRING;
	public BugTaskElements getBugTaskAccess() {
		return pBugTask;
	}
	
	public ParserRule getBugTaskRule() {
		return getBugTaskAccess().getRule();
	}
	
	//AnalyseTask:
	//	'Analyse' analyse=STRING;
	public AnalyseTaskElements getAnalyseTaskAccess() {
		return pAnalyseTask;
	}
	
	public ParserRule getAnalyseTaskRule() {
		return getAnalyseTaskAccess().getRule();
	}
	
	//TestTask:
	//	'Test' test=STRING;
	public TestTaskElements getTestTaskAccess() {
		return pTestTask;
	}
	
	public ParserRule getTestTaskRule() {
		return getTestTaskAccess().getRule();
	}
	
	//DocumentTask:
	//	'Document' doc=STRING;
	public DocumentTaskElements getDocumentTaskAccess() {
		return pDocumentTask;
	}
	
	public ParserRule getDocumentTaskRule() {
		return getDocumentTaskAccess().getRule();
	}
	
	//DeployTask:
	//	'Deploy' deploy=STRING;
	public DeployTaskElements getDeployTaskAccess() {
		return pDeployTask;
	}
	
	public ParserRule getDeployTaskRule() {
		return getDeployTaskAccess().getRule();
	}
	
	//enum Status:
	//	STUCK='Stuck' | PROGRESS='In Progress' | DONE='Done' | REVIEW='Waiting for review';
	public StatusElements getStatusAccess() {
		return eStatus;
	}
	
	public EnumRule getStatusRule() {
		return getStatusAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
