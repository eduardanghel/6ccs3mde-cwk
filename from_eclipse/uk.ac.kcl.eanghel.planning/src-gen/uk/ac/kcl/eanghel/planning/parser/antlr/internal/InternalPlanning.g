/*
 * generated by Xtext 2.24.0
 */
grammar InternalPlanning;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.eanghel.planning.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.eanghel.planning.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.eanghel.planning.services.PlanningGrammarAccess;

}

@parser::members {

 	private PlanningGrammarAccess grammarAccess;

    public InternalPlanningParser(TokenStream input, PlanningGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TaskPlanning";
   	}

   	@Override
   	protected PlanningGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTaskPlanning
entryRuleTaskPlanning returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskPlanningRule()); }
	iv_ruleTaskPlanning=ruleTaskPlanning
	{ $current=$iv_ruleTaskPlanning.current; }
	EOF;

// Rule TaskPlanning
ruleTaskPlanning returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Team'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskPlanningAccess().getTeamKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTaskPlanningAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskPlanningRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='Owners'
		{
			newLeafNode(otherlv_2, grammarAccess.getTaskPlanningAccess().getOwnersKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskPlanningAccess().getOwnersOwnerParserRuleCall_3_0());
				}
				lv_owners_3_0=ruleOwner
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskPlanningRule());
					}
					add(
						$current,
						"owners",
						lv_owners_3_0,
						"uk.ac.kcl.eanghel.planning.Planning.Owner");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='Projects'
		{
			newLeafNode(otherlv_4, grammarAccess.getTaskPlanningAccess().getProjectsKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskPlanningAccess().getProjsProjectParserRuleCall_5_0());
				}
				lv_projs_5_0=ruleProject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskPlanningRule());
					}
					add(
						$current,
						"projs",
						lv_projs_5_0,
						"uk.ac.kcl.eanghel.planning.Planning.Project");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskPlanningAccess().getTasksTasksParserRuleCall_6_0());
				}
				lv_tasks_6_0=ruleTasks
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskPlanningRule());
					}
					add(
						$current,
						"tasks",
						lv_tasks_6_0,
						"uk.ac.kcl.eanghel.planning.Planning.Tasks");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleOwner
entryRuleOwner returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOwnerRule()); }
	iv_ruleOwner=ruleOwner
	{ $current=$iv_ruleOwner.current; }
	EOF;

// Rule Owner
ruleOwner returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getOwnerAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getOwnerRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current; }
	EOF;

// Rule Project
ruleProject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getProjectAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getProjectRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleTasks
entryRuleTasks returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTasksRule()); }
	iv_ruleTasks=ruleTasks
	{ $current=$iv_ruleTasks.current; }
	EOF;

// Rule Tasks
ruleTasks returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Task'
		{
			newLeafNode(otherlv_0, grammarAccess.getTasksAccess().getTaskKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTasksAccess().getTaskTypeTaskTypeParserRuleCall_1_0());
				}
				lv_taskType_1_0=ruleTaskType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTasksRule());
					}
					set(
						$current,
						"taskType",
						lv_taskType_1_0,
						"uk.ac.kcl.eanghel.planning.Planning.TaskType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='owner'
		{
			newLeafNode(otherlv_2, grammarAccess.getTasksAccess().getOwnerKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTasksRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getTasksAccess().getOwnerOwnerCrossReference_3_0());
				}
			)
		)+
		otherlv_4='priority'
		{
			newLeafNode(otherlv_4, grammarAccess.getTasksAccess().getPriorityKeyword_4());
		}
		(
			(
				lv_priority_5_0=RULE_INT
				{
					newLeafNode(lv_priority_5_0, grammarAccess.getTasksAccess().getPriorityINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTasksRule());
					}
					setWithLastConsumed(
						$current,
						"priority",
						lv_priority_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='points'
		{
			newLeafNode(otherlv_6, grammarAccess.getTasksAccess().getPointsKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTasksAccess().getPointsPointsParserRuleCall_7_0());
				}
				lv_points_7_0=rulePoints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTasksRule());
					}
					set(
						$current,
						"points",
						lv_points_7_0,
						"uk.ac.kcl.eanghel.planning.Planning.Points");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='status'
		{
			newLeafNode(otherlv_8, grammarAccess.getTasksAccess().getStatusKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTasksAccess().getStatusStatusEnumRuleCall_9_0());
				}
				lv_status_9_0=ruleStatus
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTasksRule());
					}
					set(
						$current,
						"status",
						lv_status_9_0,
						"uk.ac.kcl.eanghel.planning.Planning.Status");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='project'
		{
			newLeafNode(otherlv_10, grammarAccess.getTasksAccess().getProjectKeyword_10());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTasksRule());
					}
				}
				otherlv_11=RULE_ID
				{
					newLeafNode(otherlv_11, grammarAccess.getTasksAccess().getProjProjectCrossReference_11_0());
				}
			)
		)+
	)
;

// Entry rule entryRulePoints
entryRulePoints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointsRule()); }
	iv_rulePoints=rulePoints
	{ $current=$iv_rulePoints.current; }
	EOF;

// Rule Points
rulePoints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getPointsAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPointsRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleTaskType
entryRuleTaskType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskTypeRule()); }
	iv_ruleTaskType=ruleTaskType
	{ $current=$iv_ruleTaskType.current; }
	EOF;

// Rule TaskType
ruleTaskType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTaskTypeAccess().getFeatureTaskParserRuleCall_0());
		}
		this_FeatureTask_0=ruleFeatureTask
		{
			$current = $this_FeatureTask_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTaskTypeAccess().getBugTaskParserRuleCall_1());
		}
		this_BugTask_1=ruleBugTask
		{
			$current = $this_BugTask_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTaskTypeAccess().getAnalyseTaskParserRuleCall_2());
		}
		this_AnalyseTask_2=ruleAnalyseTask
		{
			$current = $this_AnalyseTask_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTaskTypeAccess().getTestTaskParserRuleCall_3());
		}
		this_TestTask_3=ruleTestTask
		{
			$current = $this_TestTask_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTaskTypeAccess().getDocumentTaskParserRuleCall_4());
		}
		this_DocumentTask_4=ruleDocumentTask
		{
			$current = $this_DocumentTask_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTaskTypeAccess().getDeployTaskParserRuleCall_5());
		}
		this_DeployTask_5=ruleDeployTask
		{
			$current = $this_DeployTask_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFeatureTask
entryRuleFeatureTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureTaskRule()); }
	iv_ruleFeatureTask=ruleFeatureTask
	{ $current=$iv_ruleFeatureTask.current; }
	EOF;

// Rule FeatureTask
ruleFeatureTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Feature'
		{
			newLeafNode(otherlv_0, grammarAccess.getFeatureTaskAccess().getFeatureKeyword_0());
		}
		(
			(
				lv_feat_1_0=RULE_STRING
				{
					newLeafNode(lv_feat_1_0, grammarAccess.getFeatureTaskAccess().getFeatSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureTaskRule());
					}
					setWithLastConsumed(
						$current,
						"feat",
						lv_feat_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleBugTask
entryRuleBugTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBugTaskRule()); }
	iv_ruleBugTask=ruleBugTask
	{ $current=$iv_ruleBugTask.current; }
	EOF;

// Rule BugTask
ruleBugTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Bug'
		{
			newLeafNode(otherlv_0, grammarAccess.getBugTaskAccess().getBugKeyword_0());
		}
		(
			(
				lv_bug_1_0=RULE_STRING
				{
					newLeafNode(lv_bug_1_0, grammarAccess.getBugTaskAccess().getBugSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBugTaskRule());
					}
					setWithLastConsumed(
						$current,
						"bug",
						lv_bug_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAnalyseTask
entryRuleAnalyseTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnalyseTaskRule()); }
	iv_ruleAnalyseTask=ruleAnalyseTask
	{ $current=$iv_ruleAnalyseTask.current; }
	EOF;

// Rule AnalyseTask
ruleAnalyseTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Analyse'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnalyseTaskAccess().getAnalyseKeyword_0());
		}
		(
			(
				lv_analyse_1_0=RULE_STRING
				{
					newLeafNode(lv_analyse_1_0, grammarAccess.getAnalyseTaskAccess().getAnalyseSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnalyseTaskRule());
					}
					setWithLastConsumed(
						$current,
						"analyse",
						lv_analyse_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleTestTask
entryRuleTestTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestTaskRule()); }
	iv_ruleTestTask=ruleTestTask
	{ $current=$iv_ruleTestTask.current; }
	EOF;

// Rule TestTask
ruleTestTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Test'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestTaskAccess().getTestKeyword_0());
		}
		(
			(
				lv_test_1_0=RULE_STRING
				{
					newLeafNode(lv_test_1_0, grammarAccess.getTestTaskAccess().getTestSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestTaskRule());
					}
					setWithLastConsumed(
						$current,
						"test",
						lv_test_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleDocumentTask
entryRuleDocumentTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDocumentTaskRule()); }
	iv_ruleDocumentTask=ruleDocumentTask
	{ $current=$iv_ruleDocumentTask.current; }
	EOF;

// Rule DocumentTask
ruleDocumentTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Document'
		{
			newLeafNode(otherlv_0, grammarAccess.getDocumentTaskAccess().getDocumentKeyword_0());
		}
		(
			(
				lv_doc_1_0=RULE_STRING
				{
					newLeafNode(lv_doc_1_0, grammarAccess.getDocumentTaskAccess().getDocSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDocumentTaskRule());
					}
					setWithLastConsumed(
						$current,
						"doc",
						lv_doc_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleDeployTask
entryRuleDeployTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeployTaskRule()); }
	iv_ruleDeployTask=ruleDeployTask
	{ $current=$iv_ruleDeployTask.current; }
	EOF;

// Rule DeployTask
ruleDeployTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Deploy'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeployTaskAccess().getDeployKeyword_0());
		}
		(
			(
				lv_deploy_1_0=RULE_STRING
				{
					newLeafNode(lv_deploy_1_0, grammarAccess.getDeployTaskAccess().getDeploySTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeployTaskRule());
					}
					setWithLastConsumed(
						$current,
						"deploy",
						lv_deploy_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Rule Status
ruleStatus returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Stuck'
			{
				$current = grammarAccess.getStatusAccess().getSTUCKEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getStatusAccess().getSTUCKEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='In Progress'
			{
				$current = grammarAccess.getStatusAccess().getPROGRESSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getStatusAccess().getPROGRESSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Done'
			{
				$current = grammarAccess.getStatusAccess().getDONEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getStatusAccess().getDONEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Waiting for review'
			{
				$current = grammarAccess.getStatusAccess().getREVIEWEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getStatusAccess().getREVIEWEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
