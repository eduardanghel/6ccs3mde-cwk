/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.eanghel.planning.planning.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.eanghel.planning.planning.AnalyseTask;
import uk.ac.kcl.eanghel.planning.planning.PlanningPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Analyse Task</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.eanghel.planning.planning.impl.AnalyseTaskImpl#getAnalyse <em>Analyse</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AnalyseTaskImpl extends TaskTypeImpl implements AnalyseTask
{
  /**
   * The default value of the '{@link #getAnalyse() <em>Analyse</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnalyse()
   * @generated
   * @ordered
   */
  protected static final String ANALYSE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAnalyse() <em>Analyse</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnalyse()
   * @generated
   * @ordered
   */
  protected String analyse = ANALYSE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnalyseTaskImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PlanningPackage.Literals.ANALYSE_TASK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAnalyse()
  {
    return analyse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAnalyse(String newAnalyse)
  {
    String oldAnalyse = analyse;
    analyse = newAnalyse;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PlanningPackage.ANALYSE_TASK__ANALYSE, oldAnalyse, analyse));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PlanningPackage.ANALYSE_TASK__ANALYSE:
        return getAnalyse();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PlanningPackage.ANALYSE_TASK__ANALYSE:
        setAnalyse((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PlanningPackage.ANALYSE_TASK__ANALYSE:
        setAnalyse(ANALYSE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PlanningPackage.ANALYSE_TASK__ANALYSE:
        return ANALYSE_EDEFAULT == null ? analyse != null : !ANALYSE_EDEFAULT.equals(analyse);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (analyse: ");
    result.append(analyse);
    result.append(')');
    return result.toString();
  }

} //AnalyseTaskImpl
