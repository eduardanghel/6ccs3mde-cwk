/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.eanghel.planning.generator;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uk.ac.kcl.eanghel.planning.generator.SiteGenerator;
import uk.ac.kcl.eanghel.planning.generator.TextGenerator;
import uk.ac.kcl.eanghel.planning.planning.TaskPlanning;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PlanningGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
    final TaskPlanning root = ((TaskPlanning) _head);
    String _firstUpper = StringExtensions.toFirstUpper(this.generateTeamName(root));
    final String teamName = (_firstUpper + "Planning");
    fsa.generateFile((teamName + ".txt"), TextGenerator.toText(root));
    fsa.generateFile((teamName + ".html"), SiteGenerator.html(root));
  }
  
  public String generateTeamName(final TaskPlanning root) {
    return root.getName();
  }
}
